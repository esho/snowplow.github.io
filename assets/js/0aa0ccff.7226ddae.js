"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[61711],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var r=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(a),g=o,m=u["".concat(p,".").concat(g)]||u[g]||s[g]||n;return a?r.createElement(m,l(l({ref:t},d),{},{components:a})):r.createElement(m,l({ref:t},d))}));function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,l=new Array(n);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<n;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},42518:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>n,metadata:()=>i,toc:()=>c});var r=a(87462),o=(a(67294),a(3905));const n={title:"PagerDuty",date:"2020-02-26",sidebar_position:90},l=void 0,i={unversionedId:"migrated/collecting-data/collecting-data-from-third-parties/pagerduty/index",id:"migrated/collecting-data/collecting-data-from-third-parties/pagerduty/index",title:"PagerDuty",description:"Overview",source:"@site/docs/migrated/collecting-data/collecting-data-from-third-parties/pagerduty/index.md",sourceDirName:"migrated/collecting-data/collecting-data-from-third-parties/pagerduty",slug:"/migrated/collecting-data/collecting-data-from-third-parties/pagerduty/",permalink:"/docs/migrated/collecting-data/collecting-data-from-third-parties/pagerduty/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/migrated/collecting-data/collecting-data-from-third-parties/pagerduty/index.md",tags:[],version:"current",lastUpdatedAt:1660570896,formattedLastUpdatedAt:"Aug 15, 2022",sidebarPosition:90,frontMatter:{title:"PagerDuty",date:"2020-02-26",sidebar_position:90},sidebar:"tutorialSidebar",previous:{title:"Olark",permalink:"/docs/migrated/collecting-data/collecting-data-from-third-parties/olark/"},next:{title:"Pingdom",permalink:"/docs/migrated/collecting-data/collecting-data-from-third-parties/pingdom/"}},p={},c=[{value:"Overview",id:"overview",level:2},{value:"Compatibility",id:"compatibility",level:3},{value:"Setup",id:"setup",level:2},{value:"Configure PagerDuty",id:"configure-pagerduty",level:2}],d={toc:c};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"This webhook integration lets you track a variety of events logged by\xa0",(0,o.kt)("a",{parentName:"p",href:"http://www.pagerduty.com/"},"PagerDuty"),"."),(0,o.kt)("p",null,"Available events are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Trigger"),(0,o.kt)("li",{parentName:"ul"},"Acknowledge"),(0,o.kt)("li",{parentName:"ul"},"Unacknowledge"),(0,o.kt)("li",{parentName:"ul"},"Resolve"),(0,o.kt)("li",{parentName:"ul"},"Assign"),(0,o.kt)("li",{parentName:"ul"},"Escalate"),(0,o.kt)("li",{parentName:"ul"},"Delegate")),(0,o.kt)("h3",{id:"compatibility"},"Compatibility"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/snowplow/snowplow/releases/tag/0.9.13"},"Snowplow 0.9.13"),"+"," (",(0,o.kt)("inlineCode",{parentName:"li"},"POST"),"-","capable collectors for event processing)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.pagerduty.com/documentation/rest/webhooks"},"PagerDuty webhook API"))),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"Integrating PagerDuty's webhooks into Snowplow is a two-stage process:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Configure PagerDuty to send events to Snowplow"),(0,o.kt)("li",{parentName:"ol"},"(Optional) Create the PagerDuty events table into Amazon Redshift")),(0,o.kt)("h2",{id:"configure-pagerduty"},"Configure PagerDuty"),(0,o.kt)("p",null,"First login into to your PagerDuty account and select the\xa0",(0,o.kt)("strong",{parentName:"p"},"Services"),"\xa0button from the top of the screen."),(0,o.kt)("p",null,"Select which service you would like to add a Webhook endpoint to then click the\xa0",(0,o.kt)("strong",{parentName:"p"},"Add a webhook"),"\xa0button."),(0,o.kt)("p",null,(0,o.kt)("img",{src:a(11047).Z,width:"2306",height:"382"})),(0,o.kt)("p",null,"Fill in the name of your Webhook and the Endpoint URL."),(0,o.kt)("p",null,"For the Endpoint URL field, you will need to provide the URI to your Snowplow Collector. We use a special path to tell Snowplow that these events are generated by PagerDuty:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},"http://<collector host>/com.pagerduty/v1?aid=<company code>\n")),(0,o.kt)("p",null,"The\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"aid="),"\xa0name-value pair in your URI's querystring is optional; this is the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"app_id"),"\xa0parameter taken from the\xa0",(0,o.kt)("a",{parentName:"p",href:"/docs/migrated/collecting-data/collecting-from-own-applications/snowplow-tracker-protocol/"},"Snowplow Tracker Protocol"),". You can use it to specify which company in PagerDuty these call complete events belong to. Putting it all together, our setup screen now looks like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:a(50389).Z,width:"2290",height:"320"})),(0,o.kt)("p",null,"If you want, you can also manually override the event's\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"platform"),"\xa0parameter like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},"http://<collector host>/com.pagerduty/v1?aid=<company code>&p=<platform code>\n")),(0,o.kt)("p",null,"Supported platform codes can again be found in the\xa0",(0,o.kt)("a",{parentName:"p",href:"/docs/migrated/collecting-data/collecting-from-own-applications/snowplow-tracker-protocol/"},"Snowplow Tracker Protocol"),"; if not set, then the value for\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"platform"),"\xa0will default to\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"srv"),"\xa0for a server-side application."),(0,o.kt)("p",null,"Click save and from now on when any of the seven available events are triggered an event will also be sent to the Webhook!"),(0,o.kt)("p",null,"That's it - with this table deployed, your PagerDuty events should automatically flow through into Redshift."))}s.isMDXComponent=!0},11047:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/pagerduty-1-2fe9a99167859a06d1223336662a9e97.png"},50389:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/pagerduty-2-3ebad1c98ec8fce1c87c7618a3237a39.png"}}]);