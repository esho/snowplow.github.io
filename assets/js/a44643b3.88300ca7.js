"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[47094],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>m});var n=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(o),m=a,g=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return o?n.createElement(g,s(s({ref:t},p),{},{components:o})):n.createElement(g,s({ref:t},p))}));function m(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,s=new Array(r);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var d=2;d<r;d++)s[d]=o[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},82686:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=o(87462),a=(o(67294),o(3905));const r={title:"Setup Data Models",date:"2020-02-26",sidebar_position:60},s=void 0,i={unversionedId:"migrated/getting-started-on-snowplow-open-source/setup-snowplow-on-aws/setup-data-models/index",id:"migrated/getting-started-on-snowplow-open-source/setup-snowplow-on-aws/setup-data-models/index",title:"Setup Data Models",description:"Once your data is stored in S3 and Redshift, the basic setup is complete. You now have access to the event stream",source:"@site/docs/migrated/getting-started-on-snowplow-open-source/setup-snowplow-on-aws/setup-data-models/index.md",sourceDirName:"migrated/getting-started-on-snowplow-open-source/setup-snowplow-on-aws/setup-data-models",slug:"/migrated/getting-started-on-snowplow-open-source/setup-snowplow-on-aws/setup-data-models/",permalink:"/docsite-poc.github.io/docs/migrated/getting-started-on-snowplow-open-source/setup-snowplow-on-aws/setup-data-models/",draft:!1,tags:[],version:"current",lastUpdatedAt:1660568250,formattedLastUpdatedAt:"Aug 15, 2022",sidebarPosition:60,frontMatter:{title:"Setup Data Models",date:"2020-02-26",sidebar_position:60},sidebar:"tutorialSidebar",previous:{title:"SnowflakeDB",permalink:"/docsite-poc.github.io/docs/migrated/getting-started-on-snowplow-open-source/setup-snowplow-on-aws/setup-destinations/snowflakedb/"},next:{title:"Setup Snowplow Open Source on GCP",permalink:"/docsite-poc.github.io/docs/migrated/getting-started-on-snowplow-open-source/setup-snowplow-on-gcp/"}},l={},d=[{value:"Step 1: Implement the standard data model",id:"step-1-implement-the-standard-data-model",level:2},{value:"Step 2: Customize the SQL data model",id:"step-2-customize-the-sql-data-model",level:2},{value:"SQLRunner",id:"sqlrunner",level:2}],p={toc:d};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{src:o(24901).Z,width:"699",height:"125"})),(0,a.kt)("p",null,"Once your data is stored in S3 and Redshift, the basic setup is complete. You now have access to the event stream: a long list of packets of data, where each packet represents a single event. While it is possible to do analysis directly on this event stream, it is common to:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Join event-level data with other data sets (e.g. customer data)"),(0,a.kt)("li",{parentName:"ol"},"Aggregate event-level data into smaller data sets (e.g. sessions)"),(0,a.kt)("li",{parentName:"ol"},"Apply business logic (e.g. user segmentation)")),(0,a.kt)("p",null,"We call this process ",(0,a.kt)("em",{parentName:"p"},"data modeling"),". The data model is usually developed in three stages."),(0,a.kt)("h2",{id:"step-1-implement-the-standard-data-model"},"Step 1: Implement the standard data model"),(0,a.kt)("p",null,"The basic data model can be downloaded from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/snowplow/data-models"},"GitHub")," and the underlying logic explained in more detail in the ",(0,a.kt)("a",{parentName:"p",href:"https://snowplowanalytics.com/blog/2016/03/16/introduction-to-event-data-modeling/"},"technical documentation"),"."),(0,a.kt)("h2",{id:"step-2-customize-the-sql-data-model"},"Step 2: Customize the SQL data model"),(0,a.kt)("p",null,"The basic model can then be modified to include business-specific logic. This could mean adding e-commerce fields or aggregating events in different ways, ideally joining Snowplow data with other data sets (e.g. customer data). For more information on this, check out ",(0,a.kt)("a",{parentName:"p",href:"/docs/migrated/modeling-your-data/the-snowplow-web-data-model/#Customizing_the_model"},"the relevant section of the documentation"),"."),(0,a.kt)("h2",{id:"sqlrunner"},"SQLRunner"),(0,a.kt)("p",null,"The data model consists of a set of SQL queries which are executed in sequence using our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/snowplow/sql-runner"},"SQLRunner application"),". The order in which the queries are executed is determined by a config file, an example of which can be found on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/snowplow/web-data-model/blob/master/sql-runner/playbooks/web-model.yml.tmpl"},"GitHub"),"."))}c.isMDXComponent=!0},24901:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/snowplow-aws-pipeline-datamodeling-64316f9e83ef457c4591c92c1807a9a3.png"}}]);